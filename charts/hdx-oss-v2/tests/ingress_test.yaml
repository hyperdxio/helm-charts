suite: Test Ingress
templates:
  - ingress.yaml
tests:
  - it: should not render any ingress templates when disabled
    set:
      hyperdx:
        ingress:
          enabled: false
    asserts:
      - hasDocuments:
          count: 0

  - it: should render the app ingress template correctly when enabled without TLS
    set:
      hyperdx:
        ingress:
          enabled: true
          host: hyperdx.example.com
          proxyBodySize: 100m
          proxyConnectTimeout: "60"
          proxySendTimeout: "60"
          proxyReadTimeout: "60"
          tls:
            enabled: false
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Ingress
      - equal:
          path: spec.rules[0].host
          value: hyperdx.example.com
      # Validate ingress annotations
      - equal:
          path: metadata.annotations["nginx.ingress.kubernetes.io/proxy-body-size"]
          value: "100m"
      - equal:
          path: metadata.annotations["nginx.ingress.kubernetes.io/proxy-connect-timeout"]
          value: "60"
      - equal:
          path: metadata.annotations["nginx.ingress.kubernetes.io/proxy-read-timeout"]
          value: "60"
      - equal:
          path: metadata.annotations["nginx.ingress.kubernetes.io/proxy-send-timeout"]
          value: "60"
      - equal:
          path: metadata.annotations["nginx.ingress.kubernetes.io/rewrite-target"]
          value: "/$1"
      - equal:
          path: metadata.annotations["nginx.ingress.kubernetes.io/use-regex"]
          value: "true"
      # Validate chart version format without exact match
      - matchRegex:
          path: metadata.labels["helm.sh/chart"]
          pattern: ^hdx-oss-v2-\d+\.\d+\.\d+$

  - it: should render the app ingress template  with TLS when enabled
    set:
      hyperdx:
        ingress:
          enabled: true
          host: hyperdx.example.com
          tls:
            enabled: true
            secretName: hyperdx-tls
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Ingress
      - equal:
          path: spec.rules[0].host
          value: hyperdx.example.com
      - equal:
          path: spec.tls[0].secretName
          value: hyperdx-tls

  - it: should render additional ingress templates
    set:
      hyperdx:
        ingress:
          enabled: true
          host: hyperdx.example.com
          tls:
            enabled: false
          additionalIngresses:
            - name: otel-collector
              annotations:
                testProperty: "true"
                another: "yes"
              ingressClassName: nginx
              hosts:
                - host: collector.example.com
                  paths:
                    - path: /
                      pathType: Prefix
                      port: 4318
    asserts:
      - hasDocuments:
          count: 2
      - matchSnapshot: {}
        documentSelector:
          path: metadata.name
          value: RELEASE-NAME-hdx-oss-v2-otel-collector

  - it: should render additional ingress templates with TLS enabled
    set:
      hyperdx:
        ingress:
          enabled: true
          host: hyperdx.example.com
          tls:
            enabled: false
          additionalIngresses:
            - name: otel-collector
              annotations:
                testProperty: "true"
                another: "yes"
              ingressClassName: nginx
              hosts:
                - host: collector.example.com
                  paths:
                    - path: /
                      pathType: Prefix
                      port: 4318
              tls:
                - secretName: otel-collector-tls
                  hosts:
                    - collector.example.com
    asserts:
      - hasDocuments:
          count: 2
      - matchSnapshot: {}
        documentSelector:
          path: metadata.name
          value: RELEASE-NAME-hdx-oss-v2-otel-collector

  - it: should fail when annotations of the additional ingresses is not a map of strings
    set:
      hyperdx:
        ingress:
          enabled: true
          additionalIngresses:
            - name: otel-collector
              annotations:
                - invalid: "annotation"
                - format: "here"
              ingressClassName: nginx
              hosts:
                - host: collector.example.com
                  paths:
                    - path: /
                      pathType: Prefix
                      port: 4318
    asserts:
      - failedTemplate:
          errorMessage: "annotations must be a map of string key-value pairs"

  - it: should fail when TLS configuration specifies secretName without hosts
    set:
      hyperdx:
        ingress:
          enabled: true
          additionalIngresses:
            - name: otel-collector
              ingressClassName: nginx
              hosts:
                - host: collector.example.com
                  paths:
                    - path: /
                      pathType: Prefix
                      port: 4318
              tls:
                - secretName: otel-collector-tls
                  # hosts property is missing
    asserts:
      - failedTemplate:
          errorMessage: "TLS configuration must contain hosts property"

  - it: should fail when paths object is missing path property
    set:
      hyperdx:
        ingress:
          enabled: true
          additionalIngresses:
            - name: otel-collector
              ingressClassName: nginx
              hosts:
                - host: collector.example.com
                  paths:
                    - pathType: Prefix
                      port: 4318
                      # path is missing
    asserts:
      - failedTemplate:
          errorMessage: "Each path in additional ingress must contain path, pathType, and port properties"

  - it: should fail when paths object is missing pathType property
    set:
      hyperdx:
        ingress:
          enabled: true
          additionalIngresses:
            - name: otel-collector
              ingressClassName: nginx
              hosts:
                - host: collector.example.com
                  paths:
                    - path: /
                      port: 4318
                      # pathType is missing
    asserts:
      - failedTemplate:
          errorMessage: "Each path in additional ingress must contain path, pathType, and port properties"

  - it: should fail when paths object is missing port property
    set:
      hyperdx:
        ingress:
          enabled: true
          additionalIngresses:
            - name: otel-collector
              ingressClassName: nginx
              hosts:
                - host: collector.example.com
                  paths:
                    - path: /
                      pathType: Prefix
                      # port is missing
    asserts:
      - failedTemplate:
          errorMessage: "Each path in additional ingress must contain path, pathType, and port properties"
